l
# Required Libraries
library(spatstat)
library(plotly)
# Function for Strauss Process in 2D
gibbs_point_process_2d <- function(n, beta, r, iter = 5000) {
# Define window
win <- owin(c(0, 1), c(0, 1))  # 1x1 square
# Strauss model in spatstat for 2D
model <- Strauss(r = r)
# Set up initial point pattern
pp <- rpoispp(lambda = beta, win = win)
# Fit Gibbs model with Metropolis-Hastings
fit <- rmh(model = model, start = list(n.start = n), control = list(nrep = iter), trend = beta, w = win)
# Plot the result
plot(fit, main = "2D Gibbs (Strauss) Point Process")
# Return result
return(fit)
}
# Run 2D Gibbs point process
result_2d <- gibbs_point_process_2d(n = 100, beta = 100, r = 0.05, iter = 10000)
# Function for Strauss Process in 2D
gibbs_point_process_2d <- function(n, beta, r, iter = 5000) {
# Define window
win <- owin(c(0, 1), c(0, 1))  # 1x1 square
# Strauss model in spatstat for 2D
model <- Strauss(r = r)
# Set up initial point pattern
pp <- rpoispp(lambda = beta, win = win)
# Fit Gibbs model with Metropolis-Hastings
fit <- rmh(model = model, start = list(n.start = n), control = list(nrep = iter), trend = beta, w = win)
# Return result
return(fit)
}
# Run 2D Gibbs point process
result_2d <- gibbs_point_process_2d(n = 100, beta = 100, r = 0.05, iter = 10000)
# Function for Gibbs Process in 3D
gibbs_point_process_3d <- function(n, beta, r, domain_size = 1, iter = 5000) {
# Initialize points randomly in the 3D domain
points <- matrix(runif(3 * n), ncol = 3) * domain_size
# Gibbs sampling loop
for (i in 1:iter) {
# Randomly select a point
point_index <- sample(1:n, 1)
current_point <- points[point_index, ]
# Propose a new position within a small range around the point
proposal <- current_point + runif(3, min = -0.05, max = 0.05)
proposal <- pmin(pmax(proposal, 0), domain_size)  # Keep within bounds
# Calculate the number of points within the distance `r` of the proposal
distances <- sqrt(rowSums((points[-point_index, ] - proposal)^2))
close_points <- sum(distances < r)
# Calculate the probability of acceptance
current_distances <- sqrt(rowSums((points[-point_index, ] - current_point)^2))
current_close_points <- sum(current_distances < r)
delta_U <- close_points - current_close_points  # Change in potential
acceptance_prob <- min(1, exp(-beta * delta_U))
# Accept or reject the new point
if (runif(1) < acceptance_prob) {
points[point_index, ] <- proposal
}
}
# Return the points as a data frame for plotting
return(data.frame(x = points[, 1], y = points[, 2], z = points[, 3]))
}
# Run 3D Gibbs point process
result_3d <- gibbs_point_process_3d(n = 100, beta = 1, r = 0.1, iter = 5000)
# Plot the 3D result
plot_ly(data = result_3d, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 2, color = 'blue', opacity = 0.5)) %>%
layout(
title = "3D Gibbs (Strauss) Point Process",
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')
)
)
# Run 3D Gibbs point process
result_3d <- gibbs_point_process_3d(n = 100, beta = 1, r = 0.01, iter = 5000)
# Plot the 3D result
plot_ly(data = result_3d, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 2, color = 'blue', opacity = 0.5)) %>%
layout(
title = "3D Gibbs (Strauss) Point Process",
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')
)
)
# Run 3D Gibbs point process
result_3d <- gibbs_point_process_3d(n = 100, beta = 1, r = 1, iter = 5000)
# Plot the 3D result
plot_ly(data = result_3d, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 2, color = 'blue', opacity = 0.5)) %>%
layout(
title = "3D Gibbs (Strauss) Point Process",
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')
)
)
# Run 3D Gibbs point process
result_3d <- gibbs_point_process_3d(n = 100, beta = 1, r = 0.001, iter = 5000)
# Plot the 3D result
plot_ly(data = result_3d, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 2, color = 'blue', opacity = 0.5)) %>%
layout(
title = "3D Gibbs (Strauss) Point Process",
scene = list(
xaxis = list(title = 'X'),
yaxis = list(title = 'Y'),
zaxis = list(title = 'Z')
)
)
# Function for Strauss Process in 2D
gibbs_point_process_2d <- function(n, beta, r, iter = 5000) {
# Define the observation window
win <- owin(c(0, 1), c(0, 1))  # 1x1 square window
# Define the Strauss interaction model
model <- Strauss(r = r)  # Strauss interaction within distance r
# Start with an empty point pattern
pp <- rpoispp(lambda = beta, win = win)  # Initialize with a Poisson process
# Define control parameters for Gibbs sampling (Metropolis-Hastings)
control_params <- list(nrep = iter, cmax = 10, verbose = 0)
# Run the Gibbs sampler using the Strauss model
fit <- rmh(model = model, start = pp, control = control_params, win = win)
# Plot the resulting point pattern
plot(fit, main = "2D Gibbs (Strauss) Point Process")
# Return the resulting point pattern
return(fit)
}
# Run 2D Gibbs point process
result_2d <- gibbs_point_process_2d(n = 100, beta = 100, r = 0.05, iter = 10000)
# Function to simulate Strauss point process in 2D using Gibbs sampling
gibbs_point_process_2d <- function(n, beta, r, iter = 5000) {
# Define the observation window (unit square)
win <- owin(c(0, 1), c(0, 1))  # 1x1 square window
# Define the Strauss interaction model (points repel each other within radius r)
model <- Strauss(r = r)
# Define control parameters for Gibbs sampling (Metropolis-Hastings)
control_params <- list(nrep = iter, cmax = 10, verbose = 0)
# Generate initial point pattern (Poisson process)
pp <- rpoispp(lambda = beta, win = win)  # Initial Poisson process
# Run the Gibbs sampler using the Strauss model
fit <- rmh(model = model, start = pp, control = control_params, win = win)
# Plot the resulting point pattern
plot(fit, main = "2D Gibbs (Strauss) Point Process")
# Return the resulting point pattern
return(fit)
}
# Run 2D Gibbs point process simulation
result_2d <- gibbs_point_process_2d(n = 100, beta = 100, r = 0.05, iter = 10000)
# Function for the 2D Gibbs Point Process
gibbs_point_process_2d <- function(n, beta, r, iter = 1000, window_size = 1) {
# Create an initial random set of points within the unit square
points <- matrix(runif(2 * n), ncol = 2) * window_size
# Function to calculate the pairwise distances between all points
calculate_distances <- function(points) {
dists <- as.matrix(dist(points))
diag(dists) <- Inf  # Ignore self-interaction (distance = 0)
return(dists)
}
# Metropolis-Hastings update step for Gibbs process
for (i in 1:iter) {
for (j in 1:n) {
# Select a point and propose a move within a small neighborhood
current_point <- points[j, ]
proposed_point <- current_point + runif(2, min = -0.05, max = 0.05)  # Small random move
proposed_point <- pmin(pmax(proposed_point, 0), window_size)  # Keep point within bounds
# Calculate distances between the proposed point and the others
new_points <- points
new_points[j, ] <- proposed_point
dists <- calculate_distances(new_points)
# Count the number of points within the repulsion distance `r`
close_points_old <- sum(dists[j, ] < r)
close_points_new <- sum(dists[which(1:n != j), ] < r)  # Exclude self-interaction
# Compute acceptance probability
delta_U <- close_points_new - close_points_old  # Change in repulsion potential
acceptance_prob <- min(1, exp(-beta * delta_U))
# Accept or reject the proposed move
if (runif(1) < acceptance_prob) {
points[j, ] <- proposed_point  # Accept the move
}
}
}
return(points)
}
# Run 2D Gibbs Point Process
result_2d <- gibbs_point_process_2d(n = 100, beta = 1, r = 0.05, iter = 5000)
# Function to simulate 2D Gibbs Point Process with optimization
gibbs_point_process_2d_optimized <- function(n, beta, r, iter = 500, window_size = 1) {
# Create an initial random set of points within the unit square
points <- matrix(runif(2 * n), ncol = 2) * window_size
# Function to calculate pairwise distances efficiently using caching
calculate_distances <- function(points) {
dists <- as.matrix(dist(points))
diag(dists) <- Inf  # Ignore self-interaction (distance = 0)
return(dists)
}
# Metropolis-Hastings update step for Gibbs process with optimized distance calculation
for (i in 1:iter) {
dists <- calculate_distances(points)  # Precompute distances once per iteration
for (j in 1:n) {
# Select a point and propose a move within a small neighborhood
current_point <- points[j, ]
proposed_point <- current_point + runif(2, min = -0.05, max = 0.05)  # Small random move
proposed_point <- pmin(pmax(proposed_point, 0), window_size)  # Keep point within bounds
# Calculate distances between the proposed point and the others
points[j, ] <- proposed_point
new_dists <- calculate_distances(points)
# Count the number of points within the repulsion distance `r`
close_points_old <- sum(dists[j, ] < r)
close_points_new <- sum(new_dists[j, ] < r)
# Compute acceptance probability
delta_U <- close_points_new - close_points_old  # Change in repulsion potential
acceptance_prob <- min(1, exp(-beta * delta_U))
# Accept or reject the proposed move
if (runif(1) < acceptance_prob) {
dists <- new_dists  # Update distances only if the move is accepted
} else {
points[j, ] <- current_point  # Reject move
}
}
}
return(points)
}
# Run optimized 2D Gibbs Point Process
result_2d_optimized <- gibbs_point_process_2d_optimized(n = 50, beta = 1, r = 0.05, iter = 500)
# Plot the result
plot(result_2d_optimized, xlab = "X", ylab = "Y", main = "Optimized 2D Gibbs Point Process", pch = 19, col = "blue")
# Run optimized 2D Gibbs Point Process
result_2d_optimized <- gibbs_point_process_2d_optimized(n = 50, beta = 1, r = 1, iter = 500)
# Plot the result
plot(result_2d_optimized, xlab = "X", ylab = "Y", main = "Optimized 2D Gibbs Point Process", pch = 19, col = "blue")
